{"version":3,"sources":["collapse.min.js","collapse/collapse.js"],"names":["angular","module","provider","defaults","this","animation","disallowToggle","activeClass","startCollapsed","controller","$scope","$element","$attrs","self","$options","copy","forEach","key","isDefined","$toggles","$targets","$viewChangeListeners","$registerToggle","element","push","$registerTarget","$active","$setActive","value","fn","$get","$collapse","directive","$window","$animate","require","link","scope","attrs","controllers","ngModelCtrl","bsCollapseCtrl","$setViewValue","$formatters","modelValue","attr","on","index","bsCollapseToggle","indexOf","$apply","render","active","addClass"],"mappings":"AAOA,YAEAA,SCAMC,OAAA,8BDEHC,SAAS,YAAa,WCErB,GAAIC,GAAAC,KAAaD,UACfE,UAAW,cDCXC,gBAAgB,EAChBC,YAAa,KCCbC,gBAAgB,GDGdC,EAAaL,KAAKK,WAAa,SAASC,EAAQC,EAAUC,GAC5D,GAAIC,GAAOT,IAGXS,GAAKC,SAAWd,QAAQe,KAAKZ,GCC7BH,QAAKgB,SAAA,YAAuB,iBAAA,cAAA,kBAAA,SAAAC,GDCvBjB,QAAQkB,UAAUN,EAAOK,MAAOJ,EAAKC,SAASG,GAAOL,EAAOK,MAGjEJ,EAAKM,YCCLN,EAAKO,YDELP,EAAKQ,wBCELR,EAAKS,gBAAS,SAAgBC,GAC9BV,EAAKM,SAAAK,KAAaD,IDElBV,ECAIY,gBAAc,SAAUF,GDC1BV,EAAKO,SCAEI,KAAAD,IDGTV,ECAEO,SAAKM,QAAAb,EAAqBC,SAAQN,eAAa,GAAA,EDCjDK,ECAIc,WAAAjB,EAAAiB,WAAA,SAAAC,GDCEf,EAAKC,SAASR,eAGhBO,EAAKO,SAASM,QAAUE,EAFxBf,EAAKO,SAASM,QAAUb,EAAKO,SAASM,UAAYE,EAAQ,GAAKA,ECIrEf,EAAKQ,qBAAkBL,QAAA,SAAAa,GACjBA,ODMNzB,MAAK0B,KAAO,WACV,GAAIC,KCGN,OAFDA,GAAU5B,SAAAA,EDCP4B,EAAUtB,WAAaA,ECCrBsB,KDKLC,UCAS,cAAS,UAAgB,WAAS,YAAO,SAAaC,EAAAC,EAAAH,GAEtDA,EAAc5B,QDEtB,QACEgC,SCAK,WAAa,cDClB1B,YAAa,SAAU,WAAY,SAAUsB,EAAUtB,YACvD2B,KAAM,SAAkBC,EAAOd,EAASe,EAAOC,GAE7C,GCAIC,GAAYD,EAAc,GDC1BE,EAAiBF,EAAY,EAE9BC,KAGDC,ECAMpB,qBAAwBG,KAAA,WDC5BgB,ECAEE,cAAeD,EAAwBrB,SAAAM,WDI3Cc,EAAYG,YAAYnB,KAAK,SAASoB,GAKpC,MAHIH,GAAerB,SAASM,UAAyB,EAAbkB,GACtCH,EAAed,WAAwB,EAAbiB,GAErBA,UAUhBZ,UCAS,mBAAiB,WDEzB,OACEG,SCAU,YAAK,eDCfC,KAAM,SAAkBC,EAAOd,EAASe,EAAOC,GCE7C,GACAE,IADeF,EAAA,GACKA,EAAW,GDG/BhB,GCAQsB,KAAA,cAAA,YDGRJ,EAAenB,gBAAgBC,GAC/BA,EAAQuB,GAAG,QAAS,WAClB,GAAIC,GAAQT,EAAMU,kBAAoBP,EAAetB,SAAS8B,QAAQ1B,EACtEkB,GAAed,WAAmB,EAARoB,GAC1BV,EAAMa,eAQblB,UCAS,oBAAc,WAAY,SAAAE,GDElC,OACEC,SAAU,YAAa,eAEvBC,KAAM,SAAkBC,EAAOd,EAASe,EAAOC,GAgB7C,QCAEY,KDCA,GAAIJ,GAAQN,EAAerB,SAAS6B,QAAQ1B,GCC9C6B,EAAAX,EAAArB,SAAAM,ODCEQ,GAASa,IAAUK,EAAS,WAAa,eAAe7B,EAASkB,EAAe3B,SAASP,aCjB3F,GACEkC,IADgBF,EAAS,GACRA,EAAA,GDGnBhB,GAAQ8B,SAAS,YCGjBZ,EAAkB3B,SAAAT,WAChBkB,EAAI8B,SAAQZ,EAAe3B,SAAST,WDItCoC,EAAehB,gBAAgBF,GAQ/BkB,EAAepB,qBAAqBG,KAAK,WACvC2B,MAEFA","file":"collapse.min.js","sourcesContent":["/**\n * angular-strap\n * @version v2.1.0 - 2015-12-14\n * @link http://mgcrea.github.io/angular-strap\n * @author Olivier Louvignes (olivier@mg-crea.com)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed'], function (key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function(element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function(element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$targets.$active = !self.$options.startCollapsed ? 0 : -1;\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        if(!self.$options.disallowToggle) {\r\n          self.$targets.$active = self.$targets.$active === value ? -1 : value;\r\n        } else {\r\n          self.$targets.$active = value;\r\n        }\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', [\"$window\", \"$animate\", \"$collapse\", function($window, $animate, $collapse) {\r\n\r\n    var defaults = $collapse.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$targets.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (bsCollapseCtrl.$targets.$active !== modelValue * 1) {\r\n              bsCollapseCtrl.$setActive(modelValue * 1);\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  }])\r\n\r\n  .directive('bsCollapseToggle', function() {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n        element.on('click', function() {\r\n          var index = attrs.bsCollapseToggle || bsCollapseCtrl.$toggles.indexOf(element);\r\n          bsCollapseCtrl.$setActive(index * 1);\r\n          scope.$apply();\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', [\"$animate\", function($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if(bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        function render() {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$targets.$active;\r\n          $animate[index === active ? 'addClass' : 'removeClass'](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed'], function (key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function(element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function(element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$targets.$active = !self.$options.startCollapsed ? 0 : -1;\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        if(!self.$options.disallowToggle) {\r\n          self.$targets.$active = self.$targets.$active === value ? -1 : value;\r\n        } else {\r\n          self.$targets.$active = value;\r\n        }\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function($window, $animate, $collapse) {\r\n\r\n    var defaults = $collapse.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$targets.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (bsCollapseCtrl.$targets.$active !== modelValue * 1) {\r\n              bsCollapseCtrl.$setActive(modelValue * 1);\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function() {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n        element.on('click', function() {\r\n          var index = attrs.bsCollapseToggle || bsCollapseCtrl.$toggles.indexOf(element);\r\n          bsCollapseCtrl.$setActive(index * 1);\r\n          scope.$apply();\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if(bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        function render() {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$targets.$active;\r\n          $animate[index === active ? 'addClass' : 'removeClass'](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}