{"version":3,"sources":["datepicker.min.js","datepicker/datepicker.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","placement","template","trigger","container","keyboard","html","delay","useNative","dateType","dateFormat","modelDateFormat","dayFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","$get","$window","$document","$rootScope","$sce","$locale","dateFilter","datepickerViews","$tooltip","DatepickerFactory","element","controller","config","updateSelected","el","selected","$datepicker","$isSelected","date","focusElement","focus","extend","parentScope","scope","options","$options","$scope","pickerViews","$views","views","viewDate","$mode","$iconLeft","$iconRight","$picker","$select","select","$selectPane","value","$toggleMode","setMode","length","update","isDate","isNaN","getTime","$date","call","$build","updateDisabledDates","dateRanges","disabledDateRanges","i","l","rows","forEach","$setDisabledEl","keep","$dateValue","Date","$setViewValue","copy","$render","hide","year","getFullYear","month","getMonth","getDate","mode","pristine","built","build","$updateSelected","isSelected","disabled","isDisabled","steps","targetDate","UTC","day","getUTCFullYear","getUTCMonth","getUTCDate","$onMouseDown","evt","preventDefault","stopPropagation","isTouch","targetEl","target","nodeName","toLowerCase","parent","triggerHandler","$onKeyDown","test","keyCode","shiftKey","altKey","$apply","onKeyDown","$digest","_init","init","isNative","prop","css","attr","on","_destroy","destroy","off","_show","show","setTimeout","$element","_hide","blur","document","body","navigator","userAgent","lang","id","directive","$parse","$q","$dateParser","$timeout","isNumeric","n","parseFloat","isFinite","restrict","require","link","normalizeDateRanges","ranges","key","isDefined","bsShow","$watch","newValue","oldValue","datepicker","isString","match","$observe","today","substr","parseInt","ngModel","disabledDates","disabledRanges","previousValue","dateParser","format","strict","$parsers","unshift","viewValue","$setValidity","parsedDate","parse","isMinValid","isMaxValid","isValid","toISOString","$formatters","push","modelValue","isUndefined","NaN","val","$on","split","arr","size","arrays","splice","mod","m","daySplit","picker","weekDaysMin","DATETIME_FORMATS","SHORTDAY","weekDaysLabels","slice","concat","weekDaysLabelsHtml","trustAsHtml","join","startDate","getTimezoneOffset","force","firstDayOfMonth","firstDayOfMonthOffset","firstDate","getDay","firstDateOffset","toDateString","days","isToday","label","muted","title","showLabels","labels","time","indexOf","start","end","newDate","actualTime","name","months","lastDate","actualMonth","setMonth","firstYear","years","actualYear","setYear","Array","prototype"],"mappings":"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","file":"datepicker.min.js","sourcesContent":["/**\n * angular-strap\n * @version v2.1.0 - 2015-12-14\n * @link http://mgcrea.github.io/angular-strap\n * @author Olivier Louvignes (olivier@mg-crea.com)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      template: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"$sce\", \"$locale\", \"dateFilter\", \"datepickerViews\", \"$tooltip\", function($window, $document, $rootScope, $sce, $locale, dateFilter, datepickerViews, $tooltip) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $locale.id;\r\n\r\n      function DatepickerFactory(element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if(options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function(value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function() {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function(date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function(dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function(date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if(!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if(options.autoclose && !keep) {\r\n              $datepicker.hide(true);\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function(mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function(pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if(pristine === true && $picker.built) return;\r\n          if(pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function() {\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function(date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function(el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function(value) {\r\n          var steps = $picker.steps;\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), viewDate.date + ((steps.day || 0) * value)));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if(evt.keyCode === 13) {\r\n            if(!scope.$mode) {\r\n              return $datepicker.hide(true);\r\n            } else {\r\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected(el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function() {\r\n          _show();\r\n          setTimeout(function() {\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          });\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function(blur) {\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    }];\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', [\"$window\", \"$parse\", \"$q\", \"$locale\", \"dateFilter\", \"$datepicker\", \"$dateParser\", \"$timeout\", function($window, $parse, $q, $locale, dateFilter, $datepicker, $dateParser, $timeout) {\r\n\r\n    var defaults = $datepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n    var isNumeric = function(n) {\r\n      return !isNaN(parseFloat(n)) && isFinite(n);\r\n    };\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, controller: controller};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'dateType', 'dateFormat', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!datepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(',?(datepicker),?');\r\n          newValue === true ? datepicker.show() : datepicker.hide();\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n            if(newValue === 'today') {\r\n              var today = new Date();\r\n              datepicker.$options[key] = +new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n            } else if(angular.isString(newValue) && newValue.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n              datepicker.$options[key] = +new Date(newValue.substr(1, newValue.length - 2));\r\n            } else if(isNumeric(newValue)) {\r\n              datepicker.$options[key] = +new Date(parseInt(newValue, 10));\r\n            } else if (angular.isString(newValue) && 0 === newValue.length) { // Reset date\r\n              datepicker.$options[key] = key === 'maxDate' ? +Infinity : -Infinity;\r\n            } else {\r\n              datepicker.$options[key] = +new Date(newValue);\r\n            }\r\n            // Build only if dirty\r\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\r\n          });\r\n        });\r\n\t\t\r\n        // Observe date format\r\n        angular.isDefined(attr.dateFormat) && attr.$observe('dateFormat', function(newValue) {\r\n          datepicker.$options.dateFormat = newValue;\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges(ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges !== previousValue) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: options.lang, strict: options.strictFormat});\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            return;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            return;\r\n          } else {\r\n            var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n            var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n            var isValid = isMinValid && isMaxValid;\r\n            controller.$setValidity('date', isValid);\r\n            controller.$setValidity('min', isMinValid);\r\n            controller.$setValidity('max', isMaxValid);\r\n            // Only update the model when we have a valid date\r\n            if(isValid) controller.$dateValue = parsedDate;\r\n          }\r\n          if(options.dateType === 'string') {\r\n            return dateFilter(parsedDate, options.modelDateFormat || options.dateFormat);\r\n          } else if(options.dateType === 'number') {\r\n            return controller.$dateValue.getTime();\r\n          } else if(options.dateType === 'iso') {\r\n            return controller.$dateValue.toISOString();\r\n          } else {\r\n            return new Date(controller.$dateValue);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = date;\r\n          return controller.$dateValue;\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(!controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : dateFilter(controller.$dateValue, options.dateFormat));\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  }])\r\n\r\n  .provider('datepickerViews', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      dayFormat: 'dd',\r\n      daySplit: 7\r\n    };\r\n\r\n    // Split array into smaller arrays\r\n    function split(arr, size) {\r\n      var arrays = [];\r\n      while(arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod(n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = [\"$locale\", \"$sce\", \"dateFilter\", function($locale, $sce, dateFilter) {\r\n\r\n      return function(picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var weekDaysMin = $locale.DATETIME_FORMATS.SHORTDAY;\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? new Date(options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n        var timezoneOffset = startDate.getTimezoneOffset() * 6e4;\r\n\r\n        var views = [{\r\n            format: options.dayFormat,\r\n            split: 7,\r\n            steps: { month: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getDate() !== viewDate.date) {\r\n                viewDate.date = picker.$date.getDate();\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\r\n              var today = new Date().toDateString();\r\n              // Handle daylight time switch\r\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n              var days = [], day;\r\n              for(var i = 0; i < 42; i++) { // < 7 * 6\r\n                day = new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i);\r\n                days.push({date: day, isToday: day.toDateString() === today, label: dateFilter(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n              }\r\n              scope.title = dateFilter(firstDayOfMonth, 'MMMM yyyy');\r\n              scope.showLabels = true;\r\n              scope.labels = weekDaysLabelsHtml;\r\n              scope.rows = split(days, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n            },\r\n            isDisabled: function(date) {\r\n              var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n              if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n              if (options.disabledDateRanges) {\r\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                  if (time >= options.disabledDateRanges[i].start) {\r\n                    if (time <= options.disabledDateRanges[i].end) return true;\r\n\r\n                    // The disabledDateRanges is expected to be sorted, so if time >= start,\r\n                    // we know it's not disabled.\r\n                    return false;\r\n                  }\r\n                }\r\n              }\r\n\r\n              return false;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              var actualTime = picker.$date.getTime();\r\n              var newDate;\r\n\r\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'month',\r\n            format: 'MMM',\r\n            split: 4,\r\n            steps: { year: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstMonth = new Date(viewDate.year, 0, 1);\r\n              var months = [], month;\r\n              for (var i = 0; i < 12; i++) {\r\n                month = new Date(viewDate.year, i, 1);\r\n                months.push({date: month, label: dateFilter(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n              }\r\n              scope.title = dateFilter(month, 'yyyy');\r\n              scope.showLabels = false;\r\n              scope.rows = split(months, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              var actualMonth = picker.$date.getMonth();\r\n              var newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'year',\r\n            format: 'yyyy',\r\n            split: 4,\r\n            steps: { year: 12 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n              var years = [], year;\r\n              for (var i = 0; i < 12; i++) {\r\n                year = new Date(firstYear + i, 0, 1);\r\n                years.push({date: year, label: dateFilter(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n              }\r\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n              scope.showLabels = false;\r\n              scope.rows = split(years, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              var actualYear = picker.$date.getFullYear(),\r\n                  newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    }];\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      template: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $locale, dateFilter, datepickerViews, $tooltip) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $locale.id;\r\n\r\n      function DatepickerFactory(element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if(options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function(value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function() {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function(date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function(dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function(date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if(!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if(options.autoclose && !keep) {\r\n              $datepicker.hide(true);\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function(mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function(pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if(pristine === true && $picker.built) return;\r\n          if(pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function() {\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function(date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function(el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function(value) {\r\n          var steps = $picker.steps;\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), viewDate.date + ((steps.day || 0) * value)));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if(evt.keyCode === 13) {\r\n            if(!scope.$mode) {\r\n              return $datepicker.hide(true);\r\n            } else {\r\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected(el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function() {\r\n          _show();\r\n          setTimeout(function() {\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          });\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function(blur) {\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function($window, $parse, $q, $locale, dateFilter, $datepicker, $dateParser, $timeout) {\r\n\r\n    var defaults = $datepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n    var isNumeric = function(n) {\r\n      return !isNaN(parseFloat(n)) && isFinite(n);\r\n    };\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, controller: controller};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'dateType', 'dateFormat', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!datepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(',?(datepicker),?');\r\n          newValue === true ? datepicker.show() : datepicker.hide();\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n            if(newValue === 'today') {\r\n              var today = new Date();\r\n              datepicker.$options[key] = +new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n            } else if(angular.isString(newValue) && newValue.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n              datepicker.$options[key] = +new Date(newValue.substr(1, newValue.length - 2));\r\n            } else if(isNumeric(newValue)) {\r\n              datepicker.$options[key] = +new Date(parseInt(newValue, 10));\r\n            } else if (angular.isString(newValue) && 0 === newValue.length) { // Reset date\r\n              datepicker.$options[key] = key === 'maxDate' ? +Infinity : -Infinity;\r\n            } else {\r\n              datepicker.$options[key] = +new Date(newValue);\r\n            }\r\n            // Build only if dirty\r\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\r\n          });\r\n        });\r\n\t\t\r\n        // Observe date format\r\n        angular.isDefined(attr.dateFormat) && attr.$observe('dateFormat', function(newValue) {\r\n          datepicker.$options.dateFormat = newValue;\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges(ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges !== previousValue) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: options.lang, strict: options.strictFormat});\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            return;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            return;\r\n          } else {\r\n            var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n            var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n            var isValid = isMinValid && isMaxValid;\r\n            controller.$setValidity('date', isValid);\r\n            controller.$setValidity('min', isMinValid);\r\n            controller.$setValidity('max', isMaxValid);\r\n            // Only update the model when we have a valid date\r\n            if(isValid) controller.$dateValue = parsedDate;\r\n          }\r\n          if(options.dateType === 'string') {\r\n            return dateFilter(parsedDate, options.modelDateFormat || options.dateFormat);\r\n          } else if(options.dateType === 'number') {\r\n            return controller.$dateValue.getTime();\r\n          } else if(options.dateType === 'iso') {\r\n            return controller.$dateValue.toISOString();\r\n          } else {\r\n            return new Date(controller.$dateValue);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = date;\r\n          return controller.$dateValue;\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(!controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : dateFilter(controller.$dateValue, options.dateFormat));\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      dayFormat: 'dd',\r\n      daySplit: 7\r\n    };\r\n\r\n    // Split array into smaller arrays\r\n    function split(arr, size) {\r\n      var arrays = [];\r\n      while(arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod(n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function($locale, $sce, dateFilter) {\r\n\r\n      return function(picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var weekDaysMin = $locale.DATETIME_FORMATS.SHORTDAY;\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? new Date(options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n        var timezoneOffset = startDate.getTimezoneOffset() * 6e4;\r\n\r\n        var views = [{\r\n            format: options.dayFormat,\r\n            split: 7,\r\n            steps: { month: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getDate() !== viewDate.date) {\r\n                viewDate.date = picker.$date.getDate();\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\r\n              var today = new Date().toDateString();\r\n              // Handle daylight time switch\r\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n              var days = [], day;\r\n              for(var i = 0; i < 42; i++) { // < 7 * 6\r\n                day = new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i);\r\n                days.push({date: day, isToday: day.toDateString() === today, label: dateFilter(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n              }\r\n              scope.title = dateFilter(firstDayOfMonth, 'MMMM yyyy');\r\n              scope.showLabels = true;\r\n              scope.labels = weekDaysLabelsHtml;\r\n              scope.rows = split(days, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n            },\r\n            isDisabled: function(date) {\r\n              var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n              if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n              if (options.disabledDateRanges) {\r\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                  if (time >= options.disabledDateRanges[i].start) {\r\n                    if (time <= options.disabledDateRanges[i].end) return true;\r\n\r\n                    // The disabledDateRanges is expected to be sorted, so if time >= start,\r\n                    // we know it's not disabled.\r\n                    return false;\r\n                  }\r\n                }\r\n              }\r\n\r\n              return false;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              var actualTime = picker.$date.getTime();\r\n              var newDate;\r\n\r\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'month',\r\n            format: 'MMM',\r\n            split: 4,\r\n            steps: { year: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstMonth = new Date(viewDate.year, 0, 1);\r\n              var months = [], month;\r\n              for (var i = 0; i < 12; i++) {\r\n                month = new Date(viewDate.year, i, 1);\r\n                months.push({date: month, label: dateFilter(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n              }\r\n              scope.title = dateFilter(month, 'yyyy');\r\n              scope.showLabels = false;\r\n              scope.rows = split(months, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              var actualMonth = picker.$date.getMonth();\r\n              var newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'year',\r\n            format: 'yyyy',\r\n            split: 4,\r\n            steps: { year: 12 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n              var years = [], year;\r\n              for (var i = 0; i < 12; i++) {\r\n                year = new Date(firstYear + i, 0, 1);\r\n                years.push({date: year, label: dateFilter(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n              }\r\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n              scope.showLabels = false;\r\n              scope.rows = split(years, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              var actualYear = picker.$date.getFullYear(),\r\n                  newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}