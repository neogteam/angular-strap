{"version":3,"sources":["affix.min.js","affix/affix.js"],"names":["angular","module","provider","defaults","this","offsetTop","$get","$window","debounce","dimensions","AffixFactory","element","config","getRequiredAffixClass","unpin","position","elementHeight","scrollTop","getScrollTop","scrollHeight","getScrollHeight","top","offsetBottom","initialAffixTop","targetEl","pageYOffset","document","body","$affix","options","extend","target","reset","initialOffsetTop","affixed","parent","offsetParent","match","i","init","$parseOffsets","offset","on","checkPosition","checkPositionWithEventLoop","windowEl","$debouncedOnResize","destroy","off","setTimeout","height","affix","removeClass","addClass","css","offsetUnpin","bodyEl","offsetHeight","$onResize","directive","restrict","require","link","scope","attr","affixTarget","$element","forEach","key","isDefined","$on","controller"],"mappings":"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","file":"affix.min.js","sourcesContent":["/**\n * angular-strap\n * @version v2.1.0 - 2015-12-14\n * @link http://mgcrea.github.io/angular-strap\n * @author Olivier Louvignes (olivier@mg-crea.com)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto'\r\n    };\r\n\r\n    this.$get = [\"$window\", \"debounce\", \"dimensions\", function($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory(element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom',\r\n            initialAffixTop = 0,\r\n            initialOffsetTop = 0,\r\n            offsetTop = 0,\r\n            offsetBottom = 0,\r\n            affixed = null,\r\n            unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          }\r\n          else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function() {\r\n\r\n          $affix.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', $affix.checkPosition);\r\n          targetEl.on('click', $affix.checkPositionWithEventLoop);\r\n          windowEl.on('resize', $affix.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          $affix.checkPosition();\r\n          $affix.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function() {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', $affix.checkPosition);\r\n          targetEl.off('click', $affix.checkPositionWithEventLoop);\r\n          windowEl.off('resize', $affix.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function() {\r\n\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function() {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if(affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n          if(affix === 'top') {\r\n            unpin = null;\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          } else if(affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            }\r\n            else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            element.css('position', 'fixed');\r\n            element.css('top', initialAffixTop + 'px');\r\n          }\r\n\r\n        };\r\n\r\n        $affix.$onResize = function() {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function() {\r\n\r\n          // Reset position to calculate correct offsetTop\r\n          element.css('position', (options.offsetParent) ? '' : 'relative');\r\n\r\n          if(options.offsetTop) {\r\n            if(options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if(options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              }\r\n              else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            }\r\n            else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if(options.offsetBottom) {\r\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            }\r\n            else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass(unpin, position, elementHeight) {\r\n\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if(scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          } else {\r\n            return 'middle';\r\n          }\r\n\r\n        }\r\n\r\n        function getScrollTop() {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight() {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    }];\r\n\r\n  })\r\n\r\n  .directive('bsAffix', [\"$affix\", \"$window\", function($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink(scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, offsetTop: 'auto', target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function() {\r\n          affix && affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  }])\r\n\r\n  .directive('bsAffixTarget', function() {\r\n    return {\r\n      controller: [\"$element\", function($element) {\r\n        this.$element = $element;\r\n      }]\r\n    };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto'\r\n    };\r\n\r\n    this.$get = function($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory(element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom',\r\n            initialAffixTop = 0,\r\n            initialOffsetTop = 0,\r\n            offsetTop = 0,\r\n            offsetBottom = 0,\r\n            affixed = null,\r\n            unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          }\r\n          else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function() {\r\n\r\n          $affix.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', $affix.checkPosition);\r\n          targetEl.on('click', $affix.checkPositionWithEventLoop);\r\n          windowEl.on('resize', $affix.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          $affix.checkPosition();\r\n          $affix.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function() {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', $affix.checkPosition);\r\n          targetEl.off('click', $affix.checkPositionWithEventLoop);\r\n          windowEl.off('resize', $affix.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function() {\r\n\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function() {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if(affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n          if(affix === 'top') {\r\n            unpin = null;\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          } else if(affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            }\r\n            else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            element.css('position', 'fixed');\r\n            element.css('top', initialAffixTop + 'px');\r\n          }\r\n\r\n        };\r\n\r\n        $affix.$onResize = function() {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function() {\r\n\r\n          // Reset position to calculate correct offsetTop\r\n          element.css('position', (options.offsetParent) ? '' : 'relative');\r\n\r\n          if(options.offsetTop) {\r\n            if(options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if(options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              }\r\n              else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            }\r\n            else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if(options.offsetBottom) {\r\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            }\r\n            else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass(unpin, position, elementHeight) {\r\n\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if(scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          } else {\r\n            return 'middle';\r\n          }\r\n\r\n        }\r\n\r\n        function getScrollTop() {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight() {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink(scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, offsetTop: 'auto', target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function() {\r\n          affix && affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function() {\r\n    return {\r\n      controller: function($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n"],"sourceRoot":"/source/"}