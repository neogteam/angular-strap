{"version":3,"sources":["modal.min.js","modal/modal.js"],"names":["angular","module","provider","defaults","this","animation","backdropAnimation","prefixClass","prefixEvent","placement","template","contentTemplate","container","element","backdrop","keyboard","html","show","$get","$window","$rootScope","$compile","$q","$templateCache","$http","$animate","$timeout","$sce","dimensions","ModalFactory","config","enterAnimateCallback","scope","$emit","options","$modal","leaveAnimateCallback","bodyElement","removeClass","hideOnBackdropClick","evt","target","currentTarget","focus","hide","$options","extend","$promise","fetchTemplate","$scope","$new","forEach","key","trustAsHtml","$hide","$$postDigest","$show","$toggle","toggle","then","templateEl","contentEl","findElement","removeAttr","next","remove","outerHTML","modalLinker","modalElement","backdropElement","isObject","data","replace","htmlReplaceRegExp","trim","apply","init","destroy","$destroy","defaultPrevented","parent","isElement","after","$element","clonedElement","css","display","addClass","enter","promise","$isShown","$$phase","$root","$digest","el","requestAnimationFrame","on","$onKeyUp","leave","off","which","stopPropagation","query","document","querySelectorAll","when","get","res","put","String","prototype","setTimeout","body","directive","restrict","link","attr","transclusion","isDefined","$observe","newValue","oldValue","bsModal","$watch","content","modal","trigger","$on"],"mappings":"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","file":"modal.min.js","sourcesContent":["/**\n * angular-strap\n * @version v2.1.0 - 2015-12-14\n * @link http://mgcrea.github.io/angular-strap\n * @author Olivier Louvignes (olivier@mg-crea.com)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      template: 'modal/modal.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = [\"$window\", \"$rootScope\", \"$compile\", \"$q\", \"$templateCache\", \"$http\", \"$animate\", \"$timeout\", \"$sce\", \"dimensions\", function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var trim = String.prototype.trim;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\r\n\r\n      function ModalFactory(config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        $modal.$promise = fetchTemplate(options.template);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n        if(!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function(key) {\r\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n\r\n        // Support contentTemplate option\r\n        if(options.contentTemplate) {\r\n          $modal.$promise = $modal.$promise.then(function(template) {\r\n            var templateEl = angular.element(template);\r\n            return fetchTemplate(options.contentTemplate)\r\n            .then(function(contentTemplate) {\r\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(contentTemplate);\r\n              // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n              if(!config.template) contentEl.next().remove();\r\n              return templateEl[0].outerHTML;\r\n            });\r\n          });\r\n        }\r\n\r\n        // Fetch, compile then initialize modal\r\n        var modalLinker, modalElement;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        $modal.$promise.then(function(template) {\r\n          if(angular.isObject(template)) template = template.data;\r\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\r\n          template = trim.apply(template);\r\n          modalLinker = $compile(template);\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function() {\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function() {\r\n\r\n          // Remove element\r\n          if(modalElement) {\r\n            modalElement.remove();\r\n            modalElement = null;\r\n          }\r\n          if(backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $modal.show = function() {\r\n\r\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          var parent;\r\n          if(angular.isElement(options.container)) {\r\n            parent = options.container;\r\n          } else {\r\n            parent = options.container ? findElement(options.container) : null;\r\n          }\r\n          var after = options.container ? null : options.element;\r\n\r\n          // Fetch a cloned element linked from template\r\n          modalElement = $modal.$element = modalLinker(scope, function(clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: animation\r\n          if(options.animation) {\r\n            if(options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          var promise = $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          if(promise && promise.then) promise.then(enterAnimateCallback);\r\n\r\n          scope.$isShown = true;\r\n          scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function() {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          if(options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n          }\r\n          if(options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n          }\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n        }\r\n\r\n        $modal.hide = function() {\r\n\r\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          var promise = $animate.leave(modalElement, leaveAnimateCallback);\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          if(promise && promise.then) promise.then(leaveAnimateCallback);\r\n\r\n          if(options.backdrop) {\r\n            $animate.leave(backdropElement);\r\n          }\r\n          scope.$isShown = false;\r\n          scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n\r\n          // Unbind events\r\n          if(options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n          }\r\n          if(options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          bodyElement.removeClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function() {\r\n\r\n          scope.$isShown ? $modal.hide() : $modal.show();\r\n\r\n        };\r\n\r\n        $modal.focus = function() {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function(evt) {\r\n\r\n          if (evt.which === 27 && scope.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function hideOnBackdropClick(evt) {\r\n          if(evt.target !== evt.currentTarget) return;\r\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      function fetchTemplate(template) {\r\n        return $q.when($templateCache.get(template) || $http.get(template))\r\n        .then(function(res) {\r\n          if(angular.isObject(res)) {\r\n            $templateCache.put(template, res.data);\r\n            return res.data;\r\n          }\r\n          return res;\r\n        });\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    }];\r\n\r\n  })\r\n\r\n  .directive('bsModal', [\"$window\", \"$sce\", \"$modal\", function($window, $sce, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      template: 'modal/modal.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var trim = String.prototype.trim;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\r\n\r\n      function ModalFactory(config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        $modal.$promise = fetchTemplate(options.template);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n        if(!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function(key) {\r\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n\r\n        // Support contentTemplate option\r\n        if(options.contentTemplate) {\r\n          $modal.$promise = $modal.$promise.then(function(template) {\r\n            var templateEl = angular.element(template);\r\n            return fetchTemplate(options.contentTemplate)\r\n            .then(function(contentTemplate) {\r\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(contentTemplate);\r\n              // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n              if(!config.template) contentEl.next().remove();\r\n              return templateEl[0].outerHTML;\r\n            });\r\n          });\r\n        }\r\n\r\n        // Fetch, compile then initialize modal\r\n        var modalLinker, modalElement;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        $modal.$promise.then(function(template) {\r\n          if(angular.isObject(template)) template = template.data;\r\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\r\n          template = trim.apply(template);\r\n          modalLinker = $compile(template);\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function() {\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function() {\r\n\r\n          // Remove element\r\n          if(modalElement) {\r\n            modalElement.remove();\r\n            modalElement = null;\r\n          }\r\n          if(backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $modal.show = function() {\r\n\r\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          var parent;\r\n          if(angular.isElement(options.container)) {\r\n            parent = options.container;\r\n          } else {\r\n            parent = options.container ? findElement(options.container) : null;\r\n          }\r\n          var after = options.container ? null : options.element;\r\n\r\n          // Fetch a cloned element linked from template\r\n          modalElement = $modal.$element = modalLinker(scope, function(clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: animation\r\n          if(options.animation) {\r\n            if(options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          var promise = $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          if(promise && promise.then) promise.then(enterAnimateCallback);\r\n\r\n          scope.$isShown = true;\r\n          scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function() {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          if(options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n          }\r\n          if(options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n          }\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n        }\r\n\r\n        $modal.hide = function() {\r\n\r\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          var promise = $animate.leave(modalElement, leaveAnimateCallback);\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          if(promise && promise.then) promise.then(leaveAnimateCallback);\r\n\r\n          if(options.backdrop) {\r\n            $animate.leave(backdropElement);\r\n          }\r\n          scope.$isShown = false;\r\n          scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n\r\n          // Unbind events\r\n          if(options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n          }\r\n          if(options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          bodyElement.removeClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function() {\r\n\r\n          scope.$isShown ? $modal.hide() : $modal.show();\r\n\r\n        };\r\n\r\n        $modal.focus = function() {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function(evt) {\r\n\r\n          if (evt.which === 27 && scope.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function hideOnBackdropClick(evt) {\r\n          if(evt.target !== evt.currentTarget) return;\r\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      function fetchTemplate(template) {\r\n        return $q.when($templateCache.get(template) || $http.get(template))\r\n        .then(function(res) {\r\n          if(angular.isObject(res)) {\r\n            $templateCache.put(template, res.data);\r\n            return res.data;\r\n          }\r\n          return res;\r\n        });\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function($window, $sce, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}