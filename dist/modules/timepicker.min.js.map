{"version":3,"sources":["timepicker.min.js","timepicker/timepicker.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","placement","template","trigger","container","keyboard","html","delay","useNative","timeType","timeFormat","modelTimeFormat","autoclose","minTime","Infinity","maxTime","length","hourStep","minuteStep","iconUp","iconDown","arrowBehavior","$get","$window","$document","$rootScope","$sce","$locale","dateFilter","$tooltip","timepickerFactory","element","controller","config","createSelection","start","end","createTextRange","selRange","collapse","moveStart","moveEnd","select","setSelectionRange","isUndefined","selectionStart","selectionEnd","focusElement","focus","$timepicker","extend","parentScope","scope","options","$options","$scope","selectedIndex","startDate","$dateValue","Date","viewDate","hour","getHours","meridian","minute","getMinutes","second","getSeconds","millisecond","getMilliseconds","format","DATETIME_FORMATS","formats","exec","slice","$iconUp","$iconDown","$select","date","index","$moveIndex","value","$switchMeridian","switchMeridian","update","isDate","isNaN","getTime","$date","$build","$isBuilt","keep","setHours","setMinutes","$setViewValue","$render","hide","hours","i","midIndex","parseInt","push","label","selected","$isSelected","disabled","$isDisabled","minutes","rows","showAM","isAM","timeSeparator","selectedTime","$arrowAction","$setTimeByStep","newDate","$digest","targetDate","$onMouseDown","evt","target","nodeName","toLowerCase","preventDefault","stopPropagation","isTouch","targetEl","parent","triggerHandler","$onKeyDown","test","keyCode","shiftKey","altKey","hoursLength","minutesLength","lateralMove","count","selectRange","_init","init","isNative","prop","css","attr","on","_destroy","destroy","off","_show","show","setTimeout","$element","_hide","blur","document","body","navigator","userAgent","lang","id","directive","$parse","$q","$dateParser","$timeout","requestAnimationFrame","restrict","require","link","forEach","key","isDefined","bsShow","$watch","newValue","oldValue","timepicker","isString","match","dateParser","$observe","setFullYear","substr","parse","ngModel","$parsers","unshift","viewValue","$setValidity","parsedTime","isValid","toISOString","$formatters","modelValue","NaN","val","$on"],"mappings":"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","file":"timepicker.min.js","sourcesContent":["/**\n * angular-strap\n * @version v2.1.0 - 2015-12-14\n * @link http://mgcrea.github.io/angular-strap\n * @author Olivier Louvignes (olivier@mg-crea.com)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      template: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"$sce\", \"$locale\", \"dateFilter\", \"$tooltip\", function($window, $document, $rootScope, $sce, $locale, dateFilter, $tooltip) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $locale.id;\r\n\r\n      function timepickerFactory(element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var startDate = controller.$dateValue || new Date();\r\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\r\n\r\n        var format = $locale.DATETIME_FORMATS[options.timeFormat] || options.timeFormat;\r\n        var formats = /(h+)([:\\.])?(m+)[ ]?(a?)/i.exec(format).slice(1);\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function(value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function(date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function(date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\r\n            $timepicker.$build();\r\n          } else if(!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function(date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if(!angular.isDate(date)) date = new Date(date);\r\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          controller.$setViewValue(controller.$dateValue);\r\n          controller.$render();\r\n          if(options.autoclose && !keep) {\r\n            $timepicker.hide(true);\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function(date) {\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(controller.$dateValue);\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function() {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [], hour;\r\n          for(i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({date: hour, label: dateFilter(hour, formats[0]), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\r\n          }\r\n          var minutes = [], minute;\r\n          for(i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({date: minute, label: dateFilter(minute, formats[2]), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\r\n          }\r\n\r\n          var rows = [];\r\n          for(i = 0; i < options.length; i++) {\r\n            rows.push([hours[i], minutes[i]]);\r\n          }\r\n          scope.rows = rows;\r\n          scope.showAM = !!formats[3];\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = formats[1];\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function(date, index) {\r\n          if(!$timepicker.$date) return false;\r\n          else if(index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if(index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function(date, index) {\r\n          var selectedTime;\r\n          if(index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4;\r\n          } else if(index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value,index);\r\n          } else {\r\n            $timepicker.$moveIndex(value,index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function(value, index) {\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(), hoursLength = dateFilter(newDate, 'h').length;\r\n          var minutes = newDate.getMinutes(), minutesLength = dateFilter(newDate, 'mm').length;\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          }\r\n          else {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        $timepicker.$moveIndex = function(value, index) {\r\n          var targetDate;\r\n          if(index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute);\r\n            angular.extend(viewDate, {hour: targetDate.getHours()});\r\n          } else if(index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep));\r\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if(evt.keyCode === 13) return $timepicker.hide(true);\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(), hoursLength = dateFilter(newDate, 'h').length;\r\n          var minutes = newDate.getMinutes(), minutesLength = dateFilter(newDate, 'mm').length;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + !!formats[3] * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          if(selectedIndex === 0) {\r\n            if(evt.keyCode === 38) newDate.setHours(hours - parseInt(options.hourStep, 10));\r\n            else if(evt.keyCode === 40) newDate.setHours(hours + parseInt(options.hourStep, 10));\r\n            selectRange = [0, hoursLength];\r\n          } else if(selectedIndex === 1) {\r\n            if(evt.keyCode === 38) newDate.setMinutes(minutes - parseInt(options.minuteStep, 10));\r\n            else if(evt.keyCode === 40) newDate.setMinutes(minutes + parseInt(options.minuteStep, 10));\r\n            selectRange = [hoursLength + 1, hoursLength + 1 + minutesLength];\r\n          } else if(selectedIndex === 2) {\r\n            if(!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + 1 + minutesLength + 1, hoursLength + 1 + minutesLength + 3];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection(start, end) {\r\n          if(element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if(element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if(angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function() {\r\n          _show();\r\n          setTimeout(function() {\r\n            $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          });\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function(blur) {\r\n          $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    }];\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', [\"$window\", \"$parse\", \"$q\", \"$locale\", \"dateFilter\", \"$timepicker\", \"$dateParser\", \"$timeout\", function($window, $parse, $q, $locale, dateFilter, $timepicker, $dateParser, $timeout) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, controller: controller};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'length', 'arrowBehavior'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!timepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(',?(timepicker),?');\r\n          newValue === true ? timepicker.show() : timepicker.hide();\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({format: options.timeFormat, lang: options.lang});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            if(newValue === 'now') {\r\n              timepicker.$options[key] = new Date().setFullYear(1970, 0, 1);\r\n            } else if(angular.isString(newValue) && newValue.match(/^\".+\"$/)) {\r\n              timepicker.$options[key] = +new Date(newValue.substr(1, newValue.length - 2));\r\n            } else {\r\n              timepicker.$options[key] = dateParser.parse(newValue, new Date(1970, 0, 1, 0));\r\n            }\r\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            return;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n          } else {\r\n            var isValid = parsedTime.getTime() >= options.minTime && parsedTime.getTime() <= options.maxTime;\r\n            controller.$setValidity('date', isValid);\r\n            // Only update the model when we have a valid date\r\n            if(isValid) controller.$dateValue = parsedTime;\r\n          }\r\n          if(options.timeType === 'string') {\r\n            return dateFilter(parsedTime, options.modelTimeFormat || options.timeFormat);\r\n          } else if(options.timeType === 'number') {\r\n            return controller.$dateValue.getTime();\r\n          } else if(options.timeType === 'iso') {\r\n            return controller.$dateValue.toISOString();\r\n          } else {\r\n            return new Date(controller.$dateValue);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = date;\r\n          return controller.$dateValue;\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(!controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : dateFilter(controller.$dateValue, options.timeFormat));\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      template: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $locale, dateFilter, $tooltip) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $locale.id;\r\n\r\n      function timepickerFactory(element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var startDate = controller.$dateValue || new Date();\r\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\r\n\r\n        var format = $locale.DATETIME_FORMATS[options.timeFormat] || options.timeFormat;\r\n        var formats = /(h+)([:\\.])?(m+)[ ]?(a?)/i.exec(format).slice(1);\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function(value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function(date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function(date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\r\n            $timepicker.$build();\r\n          } else if(!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function(date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if(!angular.isDate(date)) date = new Date(date);\r\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          controller.$setViewValue(controller.$dateValue);\r\n          controller.$render();\r\n          if(options.autoclose && !keep) {\r\n            $timepicker.hide(true);\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function(date) {\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(controller.$dateValue);\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function() {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [], hour;\r\n          for(i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({date: hour, label: dateFilter(hour, formats[0]), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\r\n          }\r\n          var minutes = [], minute;\r\n          for(i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({date: minute, label: dateFilter(minute, formats[2]), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\r\n          }\r\n\r\n          var rows = [];\r\n          for(i = 0; i < options.length; i++) {\r\n            rows.push([hours[i], minutes[i]]);\r\n          }\r\n          scope.rows = rows;\r\n          scope.showAM = !!formats[3];\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = formats[1];\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function(date, index) {\r\n          if(!$timepicker.$date) return false;\r\n          else if(index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if(index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function(date, index) {\r\n          var selectedTime;\r\n          if(index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4;\r\n          } else if(index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value,index);\r\n          } else {\r\n            $timepicker.$moveIndex(value,index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function(value, index) {\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(), hoursLength = dateFilter(newDate, 'h').length;\r\n          var minutes = newDate.getMinutes(), minutesLength = dateFilter(newDate, 'mm').length;\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          }\r\n          else {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        $timepicker.$moveIndex = function(value, index) {\r\n          var targetDate;\r\n          if(index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute);\r\n            angular.extend(viewDate, {hour: targetDate.getHours()});\r\n          } else if(index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep));\r\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if(evt.keyCode === 13) return $timepicker.hide(true);\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(), hoursLength = dateFilter(newDate, 'h').length;\r\n          var minutes = newDate.getMinutes(), minutesLength = dateFilter(newDate, 'mm').length;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + !!formats[3] * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          if(selectedIndex === 0) {\r\n            if(evt.keyCode === 38) newDate.setHours(hours - parseInt(options.hourStep, 10));\r\n            else if(evt.keyCode === 40) newDate.setHours(hours + parseInt(options.hourStep, 10));\r\n            selectRange = [0, hoursLength];\r\n          } else if(selectedIndex === 1) {\r\n            if(evt.keyCode === 38) newDate.setMinutes(minutes - parseInt(options.minuteStep, 10));\r\n            else if(evt.keyCode === 40) newDate.setMinutes(minutes + parseInt(options.minuteStep, 10));\r\n            selectRange = [hoursLength + 1, hoursLength + 1 + minutesLength];\r\n          } else if(selectedIndex === 2) {\r\n            if(!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + 1 + minutesLength + 1, hoursLength + 1 + minutesLength + 3];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection(start, end) {\r\n          if(element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if(element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if(angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function() {\r\n          _show();\r\n          setTimeout(function() {\r\n            $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          });\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function(blur) {\r\n          $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function($window, $parse, $q, $locale, dateFilter, $timepicker, $dateParser, $timeout) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, controller: controller};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'length', 'arrowBehavior'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!timepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(',?(timepicker),?');\r\n          newValue === true ? timepicker.show() : timepicker.hide();\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({format: options.timeFormat, lang: options.lang});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            if(newValue === 'now') {\r\n              timepicker.$options[key] = new Date().setFullYear(1970, 0, 1);\r\n            } else if(angular.isString(newValue) && newValue.match(/^\".+\"$/)) {\r\n              timepicker.$options[key] = +new Date(newValue.substr(1, newValue.length - 2));\r\n            } else {\r\n              timepicker.$options[key] = dateParser.parse(newValue, new Date(1970, 0, 1, 0));\r\n            }\r\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            return;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n          } else {\r\n            var isValid = parsedTime.getTime() >= options.minTime && parsedTime.getTime() <= options.maxTime;\r\n            controller.$setValidity('date', isValid);\r\n            // Only update the model when we have a valid date\r\n            if(isValid) controller.$dateValue = parsedTime;\r\n          }\r\n          if(options.timeType === 'string') {\r\n            return dateFilter(parsedTime, options.modelTimeFormat || options.timeFormat);\r\n          } else if(options.timeType === 'number') {\r\n            return controller.$dateValue.getTime();\r\n          } else if(options.timeType === 'iso') {\r\n            return controller.$dateValue.toISOString();\r\n          } else {\r\n            return new Date(controller.$dateValue);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = date;\r\n          return controller.$dateValue;\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(!controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : dateFilter(controller.$dateValue, options.timeFormat));\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}