{"version":3,"sources":["scrollspy.min.js","scrollspy/scrollspy.js"],"names":["angular","module","provider","spies","this","$$spies","defaults","debounce","throttle","offset","$get","$window","$document","$rootScope","dimensions","nodeName","element","name","toLowerCase","ScrollSpyFactory","config","options","extend","bodyEl","isWindowSpy","scrollEl","windowEl","scrollId","id","$$count","unbindViewContentLoaded","unbindIncludeContentLoaded","activeTarget","debouncedCheckPosition","throttledCheckPosition","debouncedCheckOffsets","viewportHeight","scrollTop","$scrollspy","trackedElements","$trackedElements","sortedElements","init","checkPosition","on","checkPositionWithEventLoop","checkOffsets","$on","destroy","off","length","pageYOffset","prop","Math","max","innerHeight","docEl","offsetTop","target","$activateElement","i","isUndefined","setTimeout","activeElement","$getTrackedElement","source","removeClass","parent","addClass","filter","obj","forEach","trackedElement","targetElement","document","querySelector","top","el","sort","a","b","trackElement","push","untrackElement","toDelete","splice","activate","body","directive","restrict","link","scope","attr","key","isDefined","scrollspy","compile","children","querySelectorAll","child","childEl"],"mappings":"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","file":"scrollspy.min.js","sourcesContent":["/**\n * angular-strap\n * @version v2.1.0 - 2015-12-14\n * @link http://mgcrea.github.io/angular-strap\n * @author Olivier Louvignes (olivier@mg-crea.com)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function() {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"dimensions\", \"debounce\", \"throttle\", function($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName(element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory(config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if(!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if(spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        var viewportHeight;\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function() {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if(scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function() {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if(this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', debouncedCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function() {\r\n\r\n          // Not ready yet\r\n          if(!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if(activeTarget === sortedElements[i].target) continue;\r\n            if(scrollTop < sortedElements[i].offsetTop) continue;\r\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function() {\r\n          setTimeout(this.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function(element) {\r\n          if(activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if(activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function(target) {\r\n          return trackedElements.filter(function(obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function() {\r\n\r\n          angular.forEach(trackedElements, function(trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function(el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function(a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function(target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function(target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements = trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function(i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    }];\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', [\"$rootScope\", \"debounce\", \"dimensions\", \"$scrollspy\", function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function() {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  }])\r\n\r\n\r\n  .directive('bsScrollspyList', [\"$rootScope\", \"debounce\", \"dimensions\", \"$scrollspy\", function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink(element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function() {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName(element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory(config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if(!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if(spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        var viewportHeight;\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function() {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if(scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function() {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if(this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', debouncedCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function() {\r\n\r\n          // Not ready yet\r\n          if(!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if(activeTarget === sortedElements[i].target) continue;\r\n            if(scrollTop < sortedElements[i].offsetTop) continue;\r\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function() {\r\n          setTimeout(this.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function(element) {\r\n          if(activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if(activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function(target) {\r\n          return trackedElements.filter(function(obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function() {\r\n\r\n          angular.forEach(trackedElements, function(trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function(el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function(a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function(target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function(target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements = trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function(i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function() {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink(element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}