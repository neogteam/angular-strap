{"version":3,"sources":["dimensions.min.js","helpers/dimensions.js"],"names":["angular","module","factory","$document","$window","fn","element","nodeName","name","toLowerCase","css","prop","extra","value","currentStyle","window","getComputedStyle","style","parseFloat","offset","boxRect","getBoundingClientRect","docElement","ownerDocument","width","offsetWidth","height","offsetHeight","top","pageYOffset","documentElement","scrollTop","clientTop","left","pageXOffset","scrollLeft","clientLeft","position","offsetParentElement","offsetParentRect","offsetParent","outer"],"mappings":"AAOA,YAEAA,SAAQC,OAAO,wCAEZC,QAAQ,cAAe,YAAa,UAAW,SAASC,EAAWC,GAElE,GCCIC,IDDSL,QAAQM,YAQjBC,EAAWF,EAAGE,SAAW,SAASD,EAASE,GAC7C,MAAOF,GAAQC,UAAYD,EAAQC,SAASE,gBAAkBD,EAAKC,cASrEJ,GAAGK,ICAC,SAAQJ,EAAcK,EAAAC,GDCxB,GAAIC,EAQJ,OANEA,GCDFP,EAAOQ,aDCGR,EAAQQ,aAAaH,GACpBI,OAAOC,iBACRD,OAAOC,iBAAiBV,GAASK,GAEjCL,EAAQW,MAAMN,GAEjBC,KAAU,EAAOM,WAAWL,IAAU,EAAIA,GASnDR,EAAGc,OCAO,SAAQb,GDChB,GAAIc,GAAUd,EAAQe,wBAClBC,EAAahB,EAAQiB,aACzB,QACEC,MAAOJ,EAAQI,OAASlB,EAAQmB,YAChCC,OAAQN,EAAQM,QAAUpB,EAAQqB,aAClCC,IAAKR,EAAQQ,KAAOb,OAAOc,aAAeP,EAAWQ,gBAAgBC,YAAcT,EAAWQ,gBAAgBE,WAAa,GAC3HC,KAAMb,EAAQa,MAAQlB,OAAOmB,aAAeZ,EAAWQ,gBAAgBK,aAAeb,EAAWQ,gBAAgBM,YAAc,KAUnI/B,ECAEgC,SAAW,SAAS/B,GDEpB,GCCEgC,GDCEnB,EAFAoB,GAAoBX,IAAK,EAAGK,KAAM,EA4BtC,OAvBoC,UAAhC5B,EAAGK,IAAIJ,EAAS,YAGlBa,EAASb,EAAQe,yBAKjBiB,EAAsBE,EAAalC,GACnCa,EAASd,EAAGc,OAAOb,GCGnBa,EAAAd,EAAAc,OAAiBb,GDCZC,EAAS+B,EAAqB,UACjCC,EAAmBlC,EAAGc,OAAOmB,ICI/BC,EAAgBX,KAAAvB,EAAAK,IAAA4B,EAAA,kBAAA,GAChBC,EAAYN,MAAM5B,EAAAK,IAAA4B,EAA8B,mBAAsB,KDKtEd,MAAOlB,EAAQmB,YACfC,OAAQpB,EAAQqB,aAChBC,IAAKT,EAAOS,IAAMW,EAAiBX,IAAMvB,EAAGK,IAAIJ,EAAS,aAAa,GACtE2B,KAAMd,EAAOc,KAAOM,EAAiBN,KAAO5B,EAAGK,IAAIJ,EAAS,cAAc,IAU9E,ICAEkC,GAAO,SAA2BlC,GDClC,GAAIgB,GAAahB,EAAQiB,cACrBiB,EAAelC,EAAQkC,cAAgBlB,CAC3C,IAAGf,EAASiC,EAAc,aAAc,MAAOlB,GAAWQ,eAC1D,MAAMU,IAAiBjC,EAASiC,EAAc,SAAgD,WAArCnC,EAAGK,IAAI8B,EAAc,aAC5EA,EAAeA,EAAaA,YAE9B,OAAOA,IAAgBlB,EAAWQ,gBAqCpC,OA3BAzB,GCAEqB,OAAO,SAAApB,EAAAmC,GDCP,GAAI5B,GAAQP,EAAQqB,YAMpB,OALGc,GACD5B,GAASR,EAAGK,IAAIJ,EAAS,aAAa,GAAQD,EAAGK,IAAIJ,EAAS,gBAAgB,GAE9EO,GAASR,EAAGK,IAAIJ,EAAS,cAAc,GAAQD,EAAGK,IAAIJ,EAAS,iBAAiB,GAAQD,EAAGK,IAAIJ,EAAS,kBAAkB,GAAQD,EAAGK,IAAIJ,EAAS,qBAAqB,GAElKO,GAUTR,ECAEmB,MAAO,SAAAlB,EAAAmC,GDCP,GAAI5B,GAAQP,EAAQmB,WAMpB,OALGgB,GCCL5B,GAAOR,EAAAK,IAAAJ,EAAA,cAAA,GAAAD,EAAAK,IAAAJ,EAAA,eAAA,GDEHO,GAASR,EAAGK,IAAIJ,EAAS,eAAe,GAAQD,EAAGK,IAAIJ,EAAS,gBAAgB,GAAQD,EAAGK,IAAIJ,EAAS,mBAAmB,GAAQD,EAAGK,IAAIJ,EAAS,oBAAoB,GAElKO,GAGFR","file":"dimensions.min.js","sourcesContent":["/**\n * angular-strap\n * @version v2.1.0 - 2015-12-14\n * @link http://mgcrea.github.io/angular-strap\n * @author Olivier Louvignes (olivier@mg-crea.com)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', [\"$document\", \"$window\", function($document, $window) {\r\n\r\n    var jqLite = angular.element;\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function(element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function(element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { //IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function(element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function(element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0},\r\n          offsetParentElement,\r\n          offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentElement\r\n        offsetParentElement = offsetParent(element);\r\n        offset = fn.offset(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentElement, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentElement);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    var offsetParent = function offsetParentElement(element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function(element, outer) {\r\n      var value = element.offsetHeight;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function(element, outer) {\r\n      var value = element.offsetWidth;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function($document, $window) {\r\n\r\n    var jqLite = angular.element;\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function(element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function(element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { //IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function(element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function(element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0},\r\n          offsetParentElement,\r\n          offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentElement\r\n        offsetParentElement = offsetParent(element);\r\n        offset = fn.offset(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentElement, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentElement);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    var offsetParent = function offsetParentElement(element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function(element, outer) {\r\n      var value = element.offsetHeight;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function(element, outer) {\r\n      var value = element.offsetWidth;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}