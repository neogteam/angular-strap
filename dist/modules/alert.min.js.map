{"version":3,"sources":["alert.min.js","alert/alert.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","prefixEvent","placement","template","container","element","backdrop","keyboard","show","duration","type","dismissable","$get","$modal","$timeout","AlertFactory","config","$alert","options","extend","$scope","hide","directive","$window","$sce","requestAnimationFrame","setTimeout","restrict","scope","link","attr","transclusion","forEach","key","isDefined","$observe","newValue","oldValue","trustAsHtml","bsAlert","$watch","isObject","content","alert","on","trigger","toggle","$on","destroy"],"mappings":"AAOA,YAMAA,SCAMC,OAAA,wBAAa,yBDEhBC,SCAG,SAAU,WDEZ,GCAEC,GAASC,KAAAD,UACTE,UAAU,UACVC,YAAU,QACVC,YAAM,QDCNC,UAAW,KCCXC,SAAU,uBACVC,WAAM,EACNC,QAAA,KDCAC,UAAU,EACVC,UAAU,ECCZC,MAAK,EAEHC,UAAS,EDCTC,MAAM,EACNC,aCAM,EDGRb,MCAIc,MAAI,SAAU,WAAe,SAAIC,EAAUC,GDE7C,QCAEC,GAAgBC,GDEhB,GAAIC,MCGFC,EAAOxB,QAAOyB,UAAetB,EAAAmB,EDE/BC,GAASJ,EAAOK,GCGhBD,EAAGG,OAAQT,cAAUO,EAAAP,YACnBO,EAAOR,ODCPO,ECAEG,OAAAV,KAAAQ,EAAAR,KDIJ,IAAIF,GAAOS,EAAOT,IAUlB,OATGU,GAAQT,WACTQ,EAAOT,KAAO,WCChBA,IDCIM,EAAS,WACPG,EAAOI,QACa,IAAnBH,EAAQT,YAIRQ,EAIT,MAAOF,OAMVO,UCAS,WAAS,UAAS,OAAO,SAAe,SAAAC,EAAcC,EAAAP,GDElCM,EAAQE,uBAAyBF,EAAQG,UAErE,QACEC,SCAO,MDCPC,OAAO,EACPC,KAAM,SAAkBD,EAAOvB,EAASyB,EAAMC,GAG5C,GCAEb,IAAaU,MAAKA,EAASvB,QAAKA,EAASG,MAAU,EDCrDd,SCAIsC,SAAa,WAAK,YAAY,WAAA,OAAA,YAAA,YAAA,WAAA,eAAA,SAAAC,GDC7BvC,QAAQwC,UAAUJ,EAAKG,MAAOf,EAAQe,GAAOH,EAAKG,MCIvDvC,QAAKsC,SAAW,QAAM,UAAY,QAAS,SAASC,GAClDH,EAAGG,IAAQH,EAAAK,SAASF,EAAW,SAAAG,EAAAC,GAC7BT,EAAAK,GAAQT,EAAOc,YAAOF,ODK1BN,EAAKS,SAAWX,EAAMY,OAAOV,EAAKS,QAAS,SAASH,EAAUC,GACzD3C,QAAQ+C,SAASL,GCClB1C,QAAQyB,OAAOS,EAAAQ,GDEfR,EAAMc,QAAUN,IAEjB,EAGH,ICAEO,GAAI1B,EAAaC,EDGnBb,GAAQuC,GAAGd,EAAKe,SAAW,QAASF,EAAMG,QAG1ClB,EAAMmB,IAAI,WAAY,WAChBJ,GAAOA,EAAMK,UACjB9B,EAAU,KCCpByB,EAAA","file":"alert.min.js","sourcesContent":["/**\n * angular-strap\n * @version v2.1.0 - 2015-12-14\n * @link http://mgcrea.github.io/angular-strap\n * @author Olivier Louvignes (olivier@mg-crea.com)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n// @TODO: submit issue to core\r\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      template: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = [\"$modal\", \"$timeout\", function($modal, $timeout) {\r\n\r\n      function AlertFactory(config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if(options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if(options.duration) {\r\n          $alert.show = function() {\r\n            show();\r\n            $timeout(function() {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    }];\r\n\r\n  })\r\n\r\n  .directive('bsAlert', [\"$window\", \"$sce\", \"$alert\", function($window, $sce, $alert) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  }]);\r\n","'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n// @TODO: submit issue to core\r\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      template: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function($modal, $timeout) {\r\n\r\n      function AlertFactory(config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if(options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if(options.duration) {\r\n          $alert.show = function() {\r\n            show();\r\n            $timeout(function() {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function($window, $sce, $alert) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}